---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'AWS Challenge two'
Parameters:
  KeyName:
    Description: 'Key Pair name'
    Type: 'AWS::EC2::KeyPair::KeyName'
    Default: mykey
  
  InstanceType: 
    Description: 'Webserver EC2 instance type'
    Type: 'String'
    Default: 't2.small'
    AllowedValues: 
      - t1.micro
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
    ConstraintDescription: 'must be a valid EC2 instance type' 
     
Mappings:
  RegionMap:
    'us-east-1':
      AMI: 'ami-6057e21a'
    'us-east-2':
      AMI: 'ami-aa1b34cf'
    'us-west-1':
      AMI: 'ami-1a033c7a'
    'us-west-2':
      AMI: 'ami-32d8124a'
    'ap-south-1':
      AMI: 'ami-2ed19c41'
    'eu-west-3':
      AMI: 'ami-c8a017b5'
    'eu-west-2':
      AMI: 'ami-e3051987'
    'eu-west-1':
      AMI: 'ami-760aaa0f'
    'ap-northeast-2':
      AMI: 'ami-fc862292'
    'ap-northeast-1':
      AMI: 'ami-2803ac4e'
    'sa-east-1':
      AMI: 'ami-1678037a'
    'ca-central-1':
      AMI: 'ami-ef3b838b'
    'ap-southeast-1':
      AMI: 'ami-dd7935be'
    'ap-southeast-2':
      AMI: 'ami-1a668878'
    'eu-central-1':
      AMI: 'ami-e28d098d'
   
  AWSInstanceType2Arch:
        t2.small: 
         Arch : HVM64
        t2.medium: 
          Arch : HVM64
        t2.large: 
          Arch: HVM64
        m1.small:
         Arch : HVM64
        m1.medium: 
          Arch: HVM64
        m1.large: 
          Arch: HVM64
        
  AWSInstanceType2NATArch: 
        t1.micro:
          Arch: NATHVM64
        t2.nano: 
          Arch : NATHVM64
        t2.micro: 
           Arch: NATHVM64
        t2.small: 
          Arch: NATHVM64
        t2.medium:  
          Arch: NATHVM64
        t2.large: 
          Arch: NATHVM64  

  AWSRegionArch2AMI:
        us-east-1: 
          HVM64: ami-0e472ba40eb589f49 
          HVMG2: ami-0a584ac55a7631c0c
        us-east-2:
          HVM64 : aami-0fb653ca2d3203ac1 
          HVMG2 : ami-0e09505bc235aa82d
        us-west-1: 
          HVM64: ami-0bdb828fd58c52235 
          HVMG2: ami-066ee5fd4a9ef77f1
        eu-west-1: 
          HVM64: ami-047bb4163c506cd98 
          HVMG2: ami-0a7c483d527806435
Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties: {}

  VPCGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties: 
      AvailabilityZone: us-east-1a
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags: 
        - Key: Name
          Value: "Public Subnet AZ1"
      VpcId: !Ref VPC

  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: us-east-1b
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      Tags: 
        - Key: Name
          Value: "Public Subnet AZ2"
      VpcId: !Ref VPC

  NAT:
    Type: AWS::EC2::NatGateway
    DependsOn: EIP
    Properties:
        AllocationId: !GetAtt EIP.AllocationId
        SubnetId: !Ref PublicSubnetA
        Tags:
        - Key: Name
          Value: "NAT to be used by servers in the private subnet"

  EIP:
    Type: AWS::EC2::EIP
    DependsOn: VPC
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: "Elastic IP for our NAT Gateway"
  
  PrivateSubnetA:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: us-east-1a
      CidrBlock: 10.0.3.0/24
      VpcId: !Ref VPC
  
  PrivateSubnetB:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: us-east-1b 
      CidrBlock: 10.0.4.0/24
      VpcId: !Ref VPC
  
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref VPC

  PrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
  
  AssociatePUBRT:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetA

  RouteTableAssociationA:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnetA
      RouteTableId: !Ref PrivateRouteTable
   
  RouteTableAssociationB:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnetB
      RouteTableId: !Ref PrivateRouteTable
  
  RoutePublicNATToInternet:
    Type: 'AWS::EC2::Route'
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PrivateInternetOutboundRoute:
    Type: AWS::EC2::Route
    Properties:
       RouteTableId:
         Ref: PrivateRouteTable
       DestinationCidrBlock: 0.0.0.0/0
       NatGatewayId:
         Ref: NAT

  NetworkAcl:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC

  SubnetNetworkAclAssociationA:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnetA
      NetworkAclId: !Ref NetworkAcl
      
  SubnetNetworkAclAssociationB:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnetB
      NetworkAclId: !Ref NetworkAcl
  NetworkAclEntryIngress:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: false
      CidrBlock: '0.0.0.0/0'
  NetworkAclEntryEgress:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: '0.0.0.0/0'
    
  LoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Subnets:
      - Ref: PublicSubnetA
      - Ref: PublicSubnetB
      SecurityGroups:
      - !Ref LoadBalancerSecurityGroup
      Scheme: 'internet-facing'
    DependsOn: VPCGatewayAttachment

  LoadBalancerListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref LoadBalancerTargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

  LoadBalancerTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 5
      HealthCheckPath: '/'
      HealthCheckPort: '80'
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 3
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Matcher:
        HttpCode: '200,302'
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPC
  
  LoadBalancerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup' 
    Properties:
      GroupDescription: 'Load Balancer Security Group'
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0

  WebServerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'challeng2-sg'
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - CidrIp: '0.0.0.0/0'
        FromPort: 22
        IpProtocol: tcp
        ToPort: 22
      - FromPort: 80
        IpProtocol: tcp
        SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
        ToPort: 80
  
  LaunchConfiguration:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      ImageId: !FindInMap [AWSRegionArch2AMI, !Ref 'AWS::Region', !FindInMap [AWSInstanceType2Arch,
          !Ref 'InstanceType', Arch]]
      SecurityGroups:
        - !Ref WebServerSecurityGroup
      InstanceType: !Ref InstanceType
      UserData:
        Fn::Base64: 
          !Sub |
            #!/bin/bash -xe
            apt-get update -y
            apt-get install apache2 -y
            systemctl start apache2.service
            cd /var/www/html
            echo "it works! Udagram, Udacity!" > index.html

  AutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      TargetGroupARNs:
      - !Ref LoadBalancerTargetGroup
      LaunchConfigurationName: !Ref LaunchConfiguration
      MinSize: '2'
      MaxSize: '4'
      Cooldown: '60'
      HealthCheckGracePeriod: 300
      HealthCheckType: ELB
      VPCZoneIdentifier:
      - !Ref PrivateSubnetA
      - !Ref PrivateSubnetB
      Tags:
      - PropagateAtLaunch: true
        Value: UdacityAssignment
        Key: Name
Outputs:
  URL:
    Value: !Sub 'http://${LoadBalancer.DNSName}'
    Description: 'Project 2 deployinf a scalable web app'
